#!/usr/bin/env python3

#
# This plugin is designed as a nagios compatible check plugin to use with
# Icinga 2 and others
#

import argparse
import sys
from datetime import datetime, timedelta
from urllib.parse import urljoin

proxies = {
  "http": None,
  "https": None,
}


import requests

class PrometheusAPI:
    def __init__(self, endpoint='http://127.0.0.1:9090/'):
        """

        :param endpoint: address of
        """
        self.endpoint = endpoint

    def _to_timestamp(self, input, base=None):
        """
        Convert string input to UNIX timestamp for Prometheus

        :param input:
        :param base:
        :return:
        """
        if type(input) == datetime:
            return input.timestamp()
        if input == 'now':
            return datetime.utcnow().timestamp()
        if type(input) in [int, float]:
            if input > 0:
                return input
            if input == 0:      # return now
                return datetime.utcnow().timestamp()
            if input < 0:
                base = self._to_timestamp(base)
                return base + input
        assert type(input) == float

    def query(self, query='prometheus_build_info'):
        return self._get(
            uri='/api/v1/query',
            params=dict(
                query=query
            )
        )
    
    def scalar(self, query):
        data = self.query(query)
        return(int(data['data']['result'][0]['value'][1]))

    def _get(self, uri, params, method='GET'):
        url = urljoin(self.endpoint, uri)
        assert method == 'GET'
        result = requests.get(
            url=url,
            params=params,
            proxies=proxies,
        )
        return result.json()

prom = PrometheusAPI()

def main():
    parser = argparse.ArgumentParser('Check disk')
    parser.add_argument('--instance', required=True)
    parser.add_argument('--service', required=True, default='netlogon')
    parser.add_argument('--expected-state', type=str, default='running')
    args = parser.parse_args()

    if args.expected_state not in ['running', 'stopped']:
       print("State should be running or stopped")
       return 3

    query_state = 'wmi_service_state{instance="%s",state="%s",name="%s"}' % (args.instance, args.expected_state, args.service)

    try:
	    svc_state = prom.scalar(query_state)
    except IndexError:
        print("Unknown service {}".format(args.service))
        return 3

    if svc_state == 1:
        print('Service {} is in state {}|{}=1'.format(args.service, args.expected_state.upper(), args.expected_state.lower()))
        return 0
    else:
        print('Warning - Service {} is not in state {}|{}=0'.format(args.service, args.expected_state.upper(), args.expected_state.lower()))
        return 1
    

if __name__ == '__main__':
    try:
        sys.exit(main())
#    except Exception as e:
#        print('Error - %s' % str(e))
#        sys.exit(3)
    finally:
        pass
